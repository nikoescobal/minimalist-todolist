{"version":3,"file":"azure-coretracing.sub.js","sourceRoot":"","sources":["../../../AutoCollection/diagnostic-channel/azure-coretracing.sub.ts"],"names":[],"mappings":";;;AAGA,0CAA8C;AAG9C,0DAAwE;AACxE,yDAA6D;AAE7D,yCAA2C;AAC3C,oEAA8D;AAG9D,IAAI,OAAO,GAAsB,EAAE,CAAC;AAE7B,IAAM,UAAU,GAAG,UAAC,KAA2B;IAClD,IAAI;QACA,IAAM,MAAI,GAAG,KAAK,CAAC,IAAI,CAAC;QACxB,IAAM,WAAS,GAAG,UAAU,CAAC,uBAAuB,CAAC,MAAI,CAAC,CAAC;QAC3D,0CAAiB,CAAC,IAAI,CAAC,MAAI,EAAE;YACzB,OAAO,CAAC,OAAO,CAAC,UAAC,MAAM;gBACnB,IAAI,MAAI,CAAC,IAAI,KAAK,cAAQ,CAAC,MAAM,IAAI,MAAI,CAAC,IAAI,KAAK,cAAQ,CAAC,QAAQ,EAAE;oBAClE,MAAM,CAAC,YAAY,CAAmB,WAAS,CAAC,CAAC;iBACpD;qBAAM,IAAI,MAAI,CAAC,IAAI,KAAK,cAAQ,CAAC,MAAM,IAAI,MAAI,CAAC,IAAI,KAAK,cAAQ,CAAC,QAAQ,IAAI,MAAI,CAAC,IAAI,KAAK,cAAQ,CAAC,QAAQ,EAAE;oBAC5G,MAAM,CAAC,eAAe,CAAsB,WAAS,CAAC,CAAC;iBAC1D;YACL,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;KACN;IACD,OAAO,GAAG,EAAE;QAAE,EAAE,oBAAoB,EAAE;KAAE;AAC5C,CAAC,CAAC;AAfW,QAAA,UAAU,cAerB;AAEF,SAAgB,MAAM,CAAC,OAAgB,EAAE,MAAuB;IAC5D,IAAI,SAAS,GAAG,MAAM,CAAC,YAAY,EAAE,CAAC;IACtC,IAAI,OAAO,EAAE;QACT,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;YACtB,4BAAO,CAAC,SAAS,CAAM,mBAAmB,EAAE,kBAAU,CAAC,CAAC;YACxD,IAAI,SAAS,EAAE;gBACX,SAAS,CAAC,kBAAkB,CAAC,oCAAwB,CAAC,kBAAkB,CAAC,CAAC;aAC7E;SACJ;QAAA,CAAC;QACF,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;KACxB;SAAM;QACH,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,UAAC,CAAC,IAAK,OAAA,CAAC,IAAI,MAAM,EAAX,CAAW,CAAC,CAAC;QAC7C,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;YACtB,4BAAO,CAAC,WAAW,CAAC,mBAAmB,EAAE,kBAAU,CAAC,CAAC;YACrD,IAAI,SAAS,EAAE;gBACX,SAAS,CAAC,qBAAqB,CAAC,oCAAwB,CAAC,kBAAkB,CAAC,CAAC;aAChF;SACJ;KACJ;AACL,CAAC;AAnBD,wBAmBC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE file in the project root for details.\r\nimport { Span } from \"@opentelemetry/tracing\";\r\nimport { SpanKind } from \"@opentelemetry/api\";\r\n\r\nimport TelemetryClient = require(\"../../Library/TelemetryClient\");\r\nimport { StatsbeatInstrumentation } from \"../../Declarations/Constants\";\r\nimport { channel, IStandardEvent } from \"diagnostic-channel\";\r\n\r\nimport * as SpanParser from \"./SpanParser\";\r\nimport { AsyncScopeManager } from \"../AsyncHooksScopeManager\";\r\nimport { DependencyTelemetry, RequestTelemetry } from \"../../Declarations/Contracts\";\r\n\r\nlet clients: TelemetryClient[] = [];\r\n\r\nexport const subscriber = (event: IStandardEvent<Span>) => {\r\n    try {\r\n        const span = event.data;\r\n        const telemetry = SpanParser.spanToTelemetryContract(span);\r\n        AsyncScopeManager.with(span, () => {\r\n            clients.forEach((client) => {\r\n                if (span.kind === SpanKind.SERVER || span.kind === SpanKind.CONSUMER) {\r\n                    client.trackRequest(<RequestTelemetry>telemetry);\r\n                } else if (span.kind === SpanKind.CLIENT || span.kind === SpanKind.INTERNAL || span.kind === SpanKind.PRODUCER) {\r\n                    client.trackDependency(<DependencyTelemetry>telemetry);\r\n                }\r\n            });\r\n        });\r\n    }\r\n    catch (err) { { /** ignore errors */ } }\r\n};\r\n\r\nexport function enable(enabled: boolean, client: TelemetryClient) {\r\n    let statsbeat = client.getStatsbeat();\r\n    if (enabled) {\r\n        if (clients.length === 0) {\r\n            channel.subscribe<any>(\"azure-coretracing\", subscriber);\r\n            if (statsbeat) {\r\n                statsbeat.addInstrumentation(StatsbeatInstrumentation.AZURE_CORE_TRACING);\r\n            }\r\n        };\r\n        clients.push(client);\r\n    } else {\r\n        clients = clients.filter((c) => c != client);\r\n        if (clients.length === 0) {\r\n            channel.unsubscribe(\"azure-coretracing\", subscriber);\r\n            if (statsbeat) {\r\n                statsbeat.removeInstrumentation(StatsbeatInstrumentation.AZURE_CORE_TRACING);\r\n            }\r\n        }\r\n    }\r\n}\r\n"]}